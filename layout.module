<?php

/**
 * @file
 * Responsive layout builder tool for Panels.
 */

/**
 * Implements hook_menu().
 */
function layout_menu() {
  $items = array();
  $items['admin/appearance/layouts'] = array(
    'title' => 'Responsive layouts',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'layout_admin_region_list',
    'access arguments' => array('administer layouts'),
    'weight' => 200,
    'file' => 'layout.admin.inc',
  );
  $items['admin/appearance/layouts/regions'] = array(
    'title' => 'Common regions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/appearance/layouts/regions/add'] = array(
    'title' => 'Add region',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('layout_admin_region_edit_form'),
    'access arguments' => array('administer layouts'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'layout.admin.inc',
  );
  $items['admin/appearance/layouts/regions/%layout_region/edit'] = array(
    'title' => 'Edit region',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('layout_admin_region_edit_form', 4),
    'access arguments' => array('administer layouts'),
    'type' => MENU_CALLBACK,
    'file' => 'layout.admin.inc',
  );
  $items['admin/appearance/layouts/regions/%layout_region/delete'] = array(
    'title' => 'Delete region',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('layout_admin_region_delete_form', 4),
    'access arguments' => array('administer layouts'),
    'type' => MENU_CALLBACK,
    'file' => 'layout.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function layout_permission() {
  return array(
    'administer layouts' => array(
      'title' => t('Administer responsive layouts'),
      'description' => t('Administer backend settings for responsive layouts.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function layout_theme() {
  return array(
    'layout_admin_region_list_form' => array(
      'render element' => 'form',
      'file' => 'layout.admin.inc',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function layout_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panels' && $plugin_type == 'layouts') {
    return "plugins/$plugin_type";
  }
}

/**
 * Add or update region in common set of regions.
 *
 * @param $region
 *   Region object with keys 'machine_name' and 'label'.
 */
function layout_region_save($region) {
  $new_values = array(
    'label' => $region->label,
  );

  // Only add the custom and weight keys if passed in. When updating existing
  // items, they might not be provided, so we should not set them to overwrite
  // existing values.
  if (isset($region->custom)) {
    $new_values['custom'] = $region->custom;
  }
  if (isset($region->weight)) {
    $new_values['weight'] = $region->weight;
  }

  // Add or update the region with the given machine name.
  return db_merge('layout_regions')
    ->key(array('machine_name' => $region->machine_name))
    ->fields($new_values)
    ->execute();
}

/**
 * Load all common layout regions.
 */
function layout_region_load_all() {
  // Get non-custom regions first in order of weights. Weight is not relevant
  // for custom regions because we don't include them in the default layout.
  return db_select('layout_regions', 'lr')
    ->fields('lr')
    ->orderBy('custom')
    ->orderBy('weight')
    ->execute()
    ->fetchAll();
}

/**
 * Load one layout based on its machine name.
 */
function layout_region_load($machine_name) {
  return db_select('layout_regions', 'lr')
    ->fields('lr')
    ->condition('machine_name', $machine_name)
    ->execute()
    ->fetchObject();
}

/**
 * Delete one layout based on its machine name.
 */
function layout_region_delete($machine_name) {
  return db_delete('layout_regions')
    ->condition('machine_name', $machine_name)
    ->execute();
}
